" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc


""""""""""""""""""""VUNDLE"""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" include fzf in the runtime path
set rtp+=~/.fzf

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}
"
Plugin 'flazz/vim-colorschemes'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/syntastic'
Plugin 'rust-lang/rust.vim'
Plugin 'fatih/vim-go'
Plugin 'wookiehangover/jshint.vim'
Plugin 'mlr-msft/vim-loves-dafny', {'for': 'dafny'}
Plugin 'junegunn/fzf', { 'rtp': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; :PluginUpdate to update
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins;
"                     append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""   YouCompleteMe    """"""""""""""""""""""""""""""""""""""""""""""
let g:ycm_confirm_extra_conf = 0
au FileType python nnoremap <leader>jd :YcmCompleter GoTo<CR>

let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'

"""""""""""""   Syntastic   """""""""""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_python_python_exec = system('which python')
let g:syntastic_go_checkers = ['']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_loc_list_height = 5

"""""""""""""   Vim-Go   """"""""""""""""""""""""""""""""""""""""""""""""""""""
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>s <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>e <Plug>(go-rename)

"""""""""""""   JSHint   """"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:JSHintHighlightErrorLine = 0

"""""""""""""   FZF   """""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>r :FZF!<cr>
nnoremap <leader>t :tabe<cr>:FZF!<cr>
nnoremap <leader>v :vsp<cr>:FZF!<cr>

""""""""""""""""Regular Vim Settings"""""""""""""""""""""""""""""""""""""""""""
syntax on
" Highlight search matches
set hlsearch
set mouse=a

" One space after terminating punctuation
set nojoinspaces

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Spacing preferences
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set textwidth=78
set wrap

" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd
" do incremental searching
set incsearch

set history=50
set backup

set swapfile
set dir=~/.vim/cache

""""""""""""""""AutoCommand""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  filetype plugin on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters
  autocmd FileType text setlocal textwidth=78

  " For python, make sure tw is 2.
  autocmd FileType python setlocal tabstop=2
  autocmd FileType python setlocal softtabstop=2
  autocmd FileType python setlocal shiftwidth=2

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

endif " has("autocmd")

""""""""""""""""Macros"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Copy/Paste macros
" <C-v> only works in insert to prevent clobbering the visual block command
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin"
    vnoremap <C-c> "+y
    inoremap <C-v> "+p
  else
    vnoremap <C-c> :w !pbcopy<CR><CR>
    inoremap <C-v> <ESC>:r !pbpaste<CR><CR>i
  endif
endif

" Take the first spell-check suggestion
noremap zm 1z=

" Because I always capitalize W
cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev WQ wq

" Open 'Normal Mode' command editor by default
nnoremap : q:i
nnoremap / q/i
nnoremap ? q?i

" Helpful save macro
nnoremap ,, :w<cr>

" Python docstring shortcut
nnoremap <leader>c o"""<cr>"""<Esc>ka

" Disable arrow keys
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" Move home row over to relax hand position
noremap  ; l
noremap  l k
noremap  k j
noremap  j h
noremap  h ""
noremap <C-w>; <C-w>l
noremap <C-w>l <C-w>k
noremap <C-w>k <C-w>j
noremap <C-w>j <C-w>h

map <leader>/ :Rg<Cr>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --hidden --fixed-strings --follow --ignore-case --no-ignore --glob "!.git/*" --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)
